# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2001, 2002 Free
# Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# This file was written by Rob Savoye (rob@cygnus.com)
# Many modifications by Jeffrey Wheat (cassidy@cygnus.com)
# With modifications by Mike Stump <mrs@cygnus.com>.

#
# g77 support library routines
#
load_lib prune.exp
load_lib gcc-defs.exp

#
# G77_UNDER_TEST is the compiler under test.
#


set gpp_compile_options ""


#
# g77_version -- extract and print the version number of the compiler
#

proc g77_version { } {
    global G77_UNDER_TEST
    
    g77_init

    # ignore any arguments after the command
    set compiler [lindex $G77_UNDER_TEST 0]
    
    # verify that the compiler exists
    if { [is_remote host] || [which $compiler] != 0 } then {
	set tmp [remote_exec host "$compiler -v"]
	set status [lindex $tmp 0];
	set output [lindex $tmp 1];
	regexp "version.*$" $output version
	if { $status == 0 && [info exists version] } then {
	    if [is_remote host] {
		clone_output "$compiler $version\n"
	    } else {
		clone_output "[which $compiler] $version\n"
	    }
	} else {
	    clone_output "Couldn't determine version of [which $compiler]\n"
	}
    } else {
	# compiler does not exist (this should have already been detected)
	warning "$compiler does not exist"
    }
}

#
# g77_link_flags -- provide new version of g77_link_flags
# (originally from libgloss.exp) which knows about the gcc tree structure
#

proc g77_link_flags { paths } {
    global rootme
    global srcdir
    global ld_library_path

    set gccpath ${paths}
    set libio_dir ""
    set flags ""
    set ld_library_path "."

    if { $gccpath != "" } {
      if [file exists "${gccpath}/libf2c/.libs/libg2c.a"] {
          append flags "-L${gccpath}/libf2c/.libs "
          append ld_library_path ":${gccpath}/libf2c/.libs"
      }
      if [file exists "${gccpath}/libf2c/libfrtbegin.a"] {
          append flags "-L${gccpath}/libf2c "
      }
      if [file exists "${gccpath}/libiberty/libiberty.a"] {
          append flags "-L${gccpath}/libiberty "
      }
      append ld_library_path ":${rootme}"
    }

    # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but
    # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH
    # (for the 64-bit ABI).  The right way to do this would be to modify
    # unix.exp -- but that's not an option since it's part of DejaGNU
    # proper, so we do it here.  We really only need to do 
    # this on IRIX, but it shouldn't hurt to do it anywhere else.
    setenv  LD_LIBRARY_PATH     $ld_library_path
    setenv  SHLIB_PATH          $ld_library_path
    setenv  LD_LIBRARYN32_PATH  $ld_library_path
    setenv  LD_LIBRARY64_PATH   $ld_library_path

    return "$flags"
}

#
# g77_init -- called at the start of each subdir of tests
#

proc g77_init { args } {
    global subdir
    global gpp_initialized
    global base_dir
    global tmpdir
    global libdir
    global gluefile wrap_flags;
    global objdir srcdir
    global ALWAYS_G77FLAGS
    global TOOL_EXECUTABLE TOOL_OPTIONS
    global G77_UNDER_TEST
    global TESTING_IN_BUILD_TREE

    if ![info exists G77_UNDER_TEST] then {
	if [info exists TOOL_EXECUTABLE] {
	    set G77_UNDER_TEST $TOOL_EXECUTABLE;
	} else {
	    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {
		set G77_UNDER_TEST [transform g77]
	    } else {
		set G77_UNDER_TEST [findfile $base_dir/../g77 "$base_dir/../g77 -B$base_dir/../" [findfile $base_dir/g77 "$base_dir/g77 -B$base_dir/" [transform g77]]]
	    }
	}
    }

    if ![is_remote host] {
	if { [which $G77_UNDER_TEST] == 0 } then {
	    perror "G77_UNDER_TEST ($G77_UNDER_TEST) does not exist"
	    exit 1
	}
    }
    if ![info exists tmpdir] {
	set tmpdir "/tmp"
    }

    if [info exists gluefile] {
	unset gluefile
    }

    if { [target_info needs_status_wrapper] != "" } {
	set gluefile ${tmpdir}/testglue.o;
	set result [build_wrapper $gluefile];
	if { $result != "" } {
	    set gluefile [lindex $result 0];
	    set wrap_flags [lindex $result 1];
	} else {
	    unset gluefile
	}
    }

    set ALWAYS_G77FLAGS ""

    if ![is_remote host] {
	if [info exists TOOL_OPTIONS] {
	    lappend ALWAYS_G77FLAGS "ldflags=[g77_link_flags [get_multilibs ${TOOL_OPTIONS}] ]";
	} else {
	    lappend ALWAYS_G77FLAGS "ldflags=[g77_link_flags [get_multilibs] ]";
	}
    }

    if [info exists TOOL_OPTIONS] {
	lappend ALWAYS_G77FLAGS "additional_flags=$TOOL_OPTIONS";
    }

    verbose -log "ALWAYS_G77FLAGS set to $ALWAYS_G77FLAGS"

    verbose "g77 is initialized" 3
}

#
# g77_target_compile -- compile a source file
#

proc g77_target_compile { source dest type options } {
    global tmpdir;
    global gluefile wrap_flags
    global ALWAYS_G77FLAGS;
    global G77_UNDER_TEST;

    if { [target_info needs_status_wrapper] != "" && [info exists gluefile] } {
	lappend options "libs=${gluefile}"
	lappend options "ldflags=${wrap_flags}"
    }

    lappend options "compiler=$G77_UNDER_TEST";

    set options [concat "$ALWAYS_G77FLAGS" $options];

    return [target_compile $source $dest $type $options]
}
