This is cpp.info, produced by makeinfo version 4.0 from cpp.texi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Cpp: (cpp).		       The GNU C preprocessor.
END-INFO-DIR-ENTRY

   This file documents the GNU C Preprocessor.

   Copyright 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: cpp.info,  Node: Other Directives,  Next: Output,  Prev: Line Control,  Up: Top

Miscellaneous Preprocessing Directives
======================================

   This section describes some additional, rarely used, preprocessing
directives.

   The ISO standard specifies that the effect of the `#pragma'
directive is implementation-defined.  The GNU C preprocessor recognizes
some pragmas, and passes unrecognized ones through to the preprocessor
output, so they are available to the compilation pass.

   In line with the C99 standard, which introduces a STDC namespace for
C99 pragmas, the preprocessor introduces a GCC namespace for GCC
pragmas.  Supported GCC preprocessor pragmas are of the form `#pragma
GCC ...'.  For backwards compatibility previously supported pragmas are
also recognized without the `GCC' prefix, however that use is
deprecated.  Pragmas that are already deprecated are not recognized with
a `GCC' prefix.

   The `#pragma GCC dependency' allows you to check the relative dates
of the current file and another file. If the other file is more recent
than the current file, a warning is issued. This is useful if the
include file is derived from the other file, and should be regenerated.
The other file is searched for using the normal include search path.
Optional trailing text can be used to give more information in the
warning message.

     #pragma GCC dependency "parse.y"
     #pragma GCC dependency "/usr/include/time.h" rerun /path/to/fixincludes

   The C99 standard also introduces the `_Pragma' operator.  The syntax
is `_Pragma (string-literal)', where `string-literal' can be either a
normal or wide-character string literal.  It is destringized, by
replacing all `\\' with a single `\' and all `\"' with a `"'.  The
result is then processed as if it had appeared as the right hand side
of a `#pragma' directive.  For example,

     _Pragma ("GCC dependency \"parse.y\"")

has the same effect as `#pragma GCC dependency "parse.y"'.  The same
effect could be achieved using macros, for example

     #define DO_PRAGMA(x) _Pragma (#x)
     DO_PRAGMA (GCC dependency "parse.y")

   The standard is unclear on where a `_Pragma' operator can appear.
The preprocessor accepts it even within a preprocessing conditional
directive like `#if'.  To be safe, you are probably best keeping it out
of directives other than `#define', and putting it on a line of its own.

   The `#ident' directive is supported for compatibility with certain
other systems.  It is followed by a line of text.  On some systems, the
text is copied into a special place in the object file; on most systems,
the text is ignored and this directive has no effect.  Typically
`#ident' is only used in header files supplied with those systems where
it is meaningful.

   The "null directive" consists of a `#' followed by a newline, with
only whitespace (including comments) in between.  A null directive is
understood as a preprocessing directive but has no effect on the
preprocessor output.  The primary significance of the existence of the
null directive is that an input line consisting of just a `#' will
produce no output, rather than a line of output containing just a `#'.
Supposedly some old C programs contain such lines.


File: cpp.info,  Node: Output,  Next: Implementation,  Prev: Other Directives,  Up: Top

C Preprocessor Output
=====================

   The output from the C preprocessor looks much like the input, except
that all preprocessing directive lines have been replaced with blank
lines and all comments with spaces.

   The ISO standard specifies that it is implementation defined whether
a preprocessor preserves whitespace between tokens, or replaces it with
e.g. a single space.  In the GNU C preprocessor, whitespace between
tokens is collapsed to become a single space, with the exception that
the first token on a non-directive line is preceded with sufficient
spaces that it appears in the same column in the preprocessed output
that it appeared in in the original source file.  This is so the output
is easy to read.  *Note Unreliable Features::.

   Source file name and line number information is conveyed by lines of
the form

     # LINENUM FILENAME FLAGS

which are inserted as needed into the output (but never within a string
or character constant), and in place of long sequences of empty lines.
Such a line means that the following line originated in file FILENAME
at line LINENUM.

   After the file name comes zero or more flags, which are `1', `2',
`3', or `4'.  If there are multiple flags, spaces separate them.  Here
is what the flags mean:

`1'
     This indicates the start of a new file.

`2'
     This indicates returning to a file (after having included another
     file).

`3'
     This indicates that the following text comes from a system header
     file, so certain warnings should be suppressed.

`4'
     This indicates that the following text should be treated as C.


File: cpp.info,  Node: Implementation,  Next: Unreliable Features,  Prev: Output,  Up: Top

Implementation-defined Behavior and Implementation Limits
=========================================================

   The ISO C standard mandates that implementations document various
aspects of preprocessor behavior.  You should try to avoid undue
reliance on behaviour described here, as it is possible that it will
change subtly in future implementations.

   * The mapping of physical source file multi-byte characters to the
     execution character set.

     Currently, GNU cpp only supports character sets that are strict
     supersets of ASCII, and performs no translation of characters.

   * Non-empty sequences of whitespace characters.

     Each whitespace sequence is not preserved, but collapsed to a
     single space.  For aesthetic reasons, the first token on each
     non-directive line of output is preceded with sufficient spaces
     that it appears in the same column as it did in the original
     source file.

   * The numeric value of character constants in preprocessor
     expressions.

     The preprocessor interprets character constants in preprocessing
     directives on the host machine.  Expressions outside preprocessing
     directives are compiled to be interpreted on the target machine.
     In the normal case of a native compiler, these two environments
     are the same and so character constants will be evaluated
     identically in both cases.  However, in the case of a cross
     compiler, the values may be different.

     Multi-character character constants are interpreted a character at
     a time, shifting the previous result left by the number of bits per
     character on the host, and adding the new character.  For example,
     'ab' on an 8-bit host would be interpreted as 'a' * 256 + 'b'.  If
     there are more characters in the constant than can fit in the
     widest native integer type on the host, usually a `long', the
     behavior is undefined.

     Evaluation of wide character constants is not properly implemented
     yet.

   * Source file inclusion.

     For a discussion on how the preprocessor locates header files,
     *note Include Operation::.

   * Interpretation of the filename resulting from a macro-expanded
     `#include' directive.

     If the macro expands to a string literal, the `#include' directive
     is processed as if the string had been specified directly.
     Otherwise, the macro must expand to a token stream beginning with
     a `<' token and including a `>' token.  In this case, the tokens
     between the `<' and the first `>' are combined to form the
     filename to be included.  Any whitespace between tokens is reduced
     to a single space; then any space after the initial `<' is
     retained, but a trailing space before the closing `>' is ignored.

     In either case, if any excess tokens remain, an error occurs and
     the directive is not processed.

   * Treatment of a `#pragma' directive that after macro-expansion
     results in a standard pragma.

     The pragma is processed as if it were a normal standard pragma.


   The following documents internal limits of GNU cpp.

   * Nesting levels of `#include' files.

     We impose an arbitrary limit of 200 levels, to avoid runaway
     recursion.  The standard requires at least 15 levels.

   * Nesting levels of conditional inclusion.

     The C standard mandates this be at least 63.  The GNU C
     preprocessor is limited only by available memory.

   * Levels of parenthesised expressions within a full expression.

     The C standard requires this to be at least 63.  In preprocessor
     conditional expressions it is limited only by available memory.

   * Significant initial characters in an identifier or macro name.

     The preprocessor treats all characters as significant.  The C
     standard requires only that the first 63 be significant.

   * Number of macros simultaneously defined in a single translation
     unit.

     The standard requires at least 4095 be possible; GNU cpp is
     limited only by available memory.

   * Number of parameters in a macro definition and arguments in a
     macro call.

     We allow USHRT_MAX, which is normally 65,535, and above the
     minimum of 127 required by the standard.

   * Number of characters on a logical source line.

     The C standard requires a minimum of 4096 be permitted.  GNU cpp
     places no limits on this, but you may get incorrect column numbers
     reported in diagnostics for lines longer than 65,535 characters.



File: cpp.info,  Node: Unreliable Features,  Next: Invocation,  Prev: Implementation,  Up: Top

Undefined Behavior and Deprecated Features
==========================================

   This section details GNU C preprocessor behavior that is subject to
change or deprecated.  You are _strongly advised_ to write your
software so it does not rely on anything described here; future versions
of the preprocessor may subtly change such behavior or even remove the
feature altogether.

   Preservation of the form of whitespace between tokens is unlikely to
change from current behavior (*Note Output::), but you are advised not
to rely on it.

   The following are undocumented and subject to change:-

   * Precedence of ## operators with respect to each other

     Whether a sequence of ## operators is evaluated left-to-right,
     right-to-left or indeed in a consistent direction at all is not
     specified.  An example of where this might matter is pasting the
     arguments `1', `e' and `-2'.  This would be fine for left-to-right
     pasting, but right-to-left pasting would produce an invalid token
     `e-2'.  It is possible to guarantee precedence by suitable use of
     nested macros.

   * Precedence of # operator with respect to the ## operator

     Which of these two operators is evaluated first is not specified.


   The following features are in flux and should not be used in portable
code:

   * Optional argument when invoking rest argument macros

     As an extension, GCC permits you to omit the variable arguments
     entirely when you use a variable argument macro.  This works
     whether or not you give the variable argument a name.  For
     example, the two macro invocations in the example below expand to
     the same thing:

          #define debug(format, ...) printf (format, __VA_ARGS__)
          debug("string");       /* Not permitted by C standard.  */
          debug("string",);      /* OK.  */

     This extension will be preserved, but the special behavior of `##'
     in this context has changed in the past and may change again in the
     future.

   * ## swallowing preceding text in rest argument macros

     Formerly, in a macro expansion, if `##' appeared before a variable
     arguments parameter, and the set of tokens specified for that
     argument in the macro invocation was empty, previous versions of
     the GNU C preprocessor would back up and remove the preceding
     sequence of non-whitespace characters (*not* the preceding token).
     This extension is in direct conflict with the 1999 C standard and
     has been drastically pared back.

     In the current version of the preprocessor, if `##' appears between
     a comma and a variable arguments parameter, and the variable
     argument is omitted entirely, the comma will be removed from the
     expansion.  If the variable argument is empty, or the token before
     `##' is not a comma, then `##' behaves as a normal token paste.

     Portable code should avoid this extension at all costs.


   The following features are deprecated and will likely be removed at
some point in the future:-

   * Attempting to paste two tokens which together do not form a valid
     preprocessing token

     The preprocessor currently warns about this and outputs the two
     tokens adjacently, which is probably the behavior the programmer
     intends.  It may not work in future, though.

     Most of the time, when you get this warning, you will find that
     `##' is being used superstitiously, to guard against whitespace
     appearing between two tokens.  It is almost always safe to delete
     the `##'.

   * #pragma once

     This pragma was once used to tell the preprocessor that it need not
     include a file more than once.  It is now obsolete and should not
     be used at all.

   * #pragma poison

     This pragma has been superseded by `#pragma GCC poison'.  *Note
     Poisoning::.

   * Multi-line string literals

     The preprocessor currently allows raw newlines in string literals.
     This extension is deprecated and will be removed in a future
     version of GCC.  The preprocessor already forbids such string
     literals in all directives apart from #define.

     Instead, make use of ISO C concatenation of adjacent string
     literals, or use `\n' followed by an escaped newline.

   * Preprocessing things which are not C

     The C preprocessor is intended to be used only with C, C++, and
     Objective C source code.  In the past, it has been abused as a
     general text processor.  It will choke on input which is not
     lexically valid C; for example, apostrophes will be interpreted as
     the beginning of character constants, and cause errors.  Also, you
     cannot rely on it preserving characteristics of the input which
     are not significant to C-family languages.  For instance, if a
     Makefile is preprocessed, all the hard tabs will be lost, and the
     Makefile will not work.

     Having said that, you can often get away with using cpp on things
     which are not C.  Other Algol-ish programming languages are often
     safe (Pascal, Ada, ...)  and so is assembly, with caution.
     `-traditional' mode is much more permissive, and can safely be
     used with e.g. Fortran.  Many of the problems go away if you write
     C or C++ style comments instead of native language comments, and
     if you avoid elaborate macros.

     Wherever possible, you should use a preprocessor geared to the
     language you are writing in.  Modern versions of the GNU assembler
     have macro facilities.  Most high level programming languages have
     their own conditional compilation and inclusion mechanism.  If all
     else fails, try a true general text processor, such as *Note M4:
     (m4)Top.



File: cpp.info,  Node: Invocation,  Next: Concept Index,  Prev: Unreliable Features,  Up: Top

Invoking the C Preprocessor
===========================

   Most often when you use the C preprocessor you will not have to
invoke it explicitly: the C compiler will do so automatically.
However, the preprocessor is sometimes useful on its own.

   The C preprocessor expects two file names as arguments, INFILE and
OUTFILE.  The preprocessor reads INFILE together with any other files
it specifies with `#include'.  All the output generated by the combined
input files is written in OUTFILE.

   Either INFILE or OUTFILE may be `-', which as INFILE means to read
from standard input and as OUTFILE means to write to standard output.
Also, if either file is omitted, it means the same as if `-' had been
specified for that file.

   Here is a table of command options accepted by the C preprocessor.
These options can also be given when compiling a C program; they are
passed along automatically to the preprocessor when it is invoked by the
compiler.

`-P'
     Inhibit generation of `#'-lines with line-number information in the
     output from the preprocessor.  This might be useful when running
     the preprocessor on something that is not C code and will be sent
     to a program which might be confused by the `#'-lines.  *Note
     Output::.

`-C'
     Do not discard comments.  All comments are passed through to the
     output file, except for comments in processed directives, which
     are deleted along with the directive.  Comments appearing in the
     expansion list of a macro will be preserved, and appear in place
     wherever the macro is invoked.

     You should be prepared for side effects when using `-C'; it causes
     the preprocessor to treat comments as tokens in their own right.
     For example, macro redefinitions that were trivial when comments
     were replaced by a single space might become significant when
     comments are retained.  Also, comments appearing at the start of
     what would be a directive line have the effect of turning that
     line into an ordinary source line, since the first token on the
     line is no longer a `#'.

`-traditional'
     Try to imitate the behavior of old-fashioned C, as opposed to ISO
     C.

        * Traditional macro expansion pays no attention to single-quote
          or double-quote characters; macro argument symbols are
          replaced by the argument values even when they appear within
          apparent string or character constants.

        * Traditionally, it is permissible for a macro expansion to end
          in the middle of a string or character constant.  The
          constant continues into the text surrounding the macro call.

        * However, traditionally the end of the line terminates a
          string or character constant, with no error.

        * In traditional C, a comment is equivalent to no text at all.
          (In ISO C, a comment counts as whitespace.)

        * Traditional C does not have the concept of a "preprocessing
          number".  It considers `1.0e+4' to be three tokens: `1.0e',
          `+', and `4'.

        * A macro is not suppressed within its own definition, in
          traditional C.  Thus, any macro that is used recursively
          inevitably causes an error.

        * The character `#' has no special meaning within a macro
          definition in traditional C.

        * In traditional C, the text at the end of a macro expansion
          can run together with the text after the macro call, to
          produce a single token.  (This is impossible in ISO C.)

        * None of the GNU extensions to the preprocessor are available
          in `-traditional' mode.


     Use the `-traditional' option when preprocessing Fortran code, so
     that single-quotes and double-quotes within Fortran comment lines
     (which are generally not recognized as such by the preprocessor)
     do not cause diagnostics about unterminated character or string
     constants.

     However, this option does not prevent diagnostics about
     unterminated comments when a C-style comment appears to start, but
     not end, within Fortran-style commentary.

     So, the following Fortran comment lines are accepted with
     `-traditional':

          C This isn't an unterminated character constant
          C Neither is "20000000000, an octal constant
          C in some dialects of Fortran

     However, this type of comment line will likely produce a
     diagnostic, or at least unexpected output from the preprocessor,
     due to the unterminated comment:

          C Some Fortran compilers accept /* as starting
          C an inline comment.

     Note that `g77' automatically supplies the `-traditional' option
     when it invokes the preprocessor.  However, a future version of
     `g77' might use a different, more-Fortran-aware preprocessor in
     place of `cpp'.

`-trigraphs'
     Process ISO standard trigraph sequences.  These are three-character
     sequences, all starting with `??', that are defined by ISO C to
     stand for single characters.  For example, `??/' stands for `\',
     so `'??/n'' is a character constant for a newline.  By default,
     GCC ignores trigraphs, but in standard-conforming modes it
     converts them.  See the `-std' option.

     The nine trigraph sequences are
    `??('
          -> `['

    `??)'
          -> `]'

    `??<'
          -> `{'

    `??>'
          -> `}'

    `??='
          -> `#'

    `??/'
          -> `\'

    `??''
          -> `^'

    `??!'
          -> `|'

    `??-'
          -> `~'

     Trigraph support is not popular, so many compilers do not
     implement it properly.  Portable code should not rely on trigraphs
     being either converted or ignored.

`-pedantic'
     Issue warnings required by the ISO C standard in certain cases such
     as when text other than a comment follows `#else' or `#endif'.

`-pedantic-errors'
     Like `-pedantic', except that errors are produced rather than
     warnings.

`-Wcomment'
`-Wcomments'
     (Both forms have the same effect).  Warn whenever a comment-start
     sequence `/*' appears in a `/*' comment, or whenever a
     backslash-newline appears in a `//' comment.

`-Wtrigraphs'
     Warn if any trigraphs are encountered.  This option used to take
     effect only if `-trigraphs' was also specified, but now works
     independently.  Warnings are not given for trigraphs within
     comments, as we feel this is obnoxious.

`-Wall'
     Requests `-Wcomment' and `-Wtrigraphs' (but not `-Wtraditional' or
     `-Wundef').

`-Wtraditional'
     Warn about certain constructs that behave differently in
     traditional and ISO C.  Also warn about ISO C constructs that have
     no traditional C equivalent, and/or problematic constructs which
     should be avoided.

        * Macro parameters that appear within string literals in the
          macro body.  In traditional C macro replacement takes place
          within string literals, but does not in ISO C.

        * In traditional C, some preprocessor directives did not exist.
          Traditional preprocessors would only consider a line to be a
          directive if the `#' appeared in column 1 on the line.
          Therefore `-Wtraditional' warns about directives that
          traditional C understands but would ignore because the `#'
          does not appear as the first character on the line.  It also
          suggests you hide directives like `#pragma' not understood by
          traditional C by indenting them.  Some traditional
          implementations would not recognise `#elif', so it suggests
          avoiding it altogether.

        * A function-like macro that appears without arguments.

        * The unary plus operator.

        * The `U' integer constant suffix.  (Traditonal C does support
          the `L' suffix on integer constants.)  Note, these suffixes
          appear in macros defined in the system headers of most modern
          systems, e.g. the _MIN/_MAX macros in limits.h.  Use of these
          macros in user code might normally lead to spurious warnings,
          however gcc's integrated preprocessor has enough context to
          avoid warning in these cases.

`-Wundef'
     Warn if an undefined identifier is evaluated in an `#if' directive.

`-I DIRECTORY'
     Add the directory DIRECTORY to the head of the list of directories
     to be searched for header files (*note Include Syntax::).  This
     can be used to override a system header file, substituting your
     own version, since these directories are searched before the system
     header file directories.  If you use more than one `-I' option,
     the directories are scanned in left-to-right order; the standard
     system directories come after.

`-I-'
     Any directories specified with `-I' options before the `-I-'
     option are searched only for the case of `#include "FILE"'; they
     are not searched for `#include <FILE>'.

     If additional directories are specified with `-I' options after
     the `-I-', these directories are searched for all `#include'
     directives.

     In addition, the `-I-' option inhibits the use of the current
     directory as the first search directory for `#include "FILE"'.
     Therefore, the current directory is searched only if it is
     requested explicitly with `-I.'.  Specifying both `-I-' and `-I.'
     allows you to control precisely which directories are searched
     before the current one and which are searched after.

`-nostdinc'
     Do not search the standard system directories for header files.
     Only the directories you have specified with `-I' options (and the
     current directory, if appropriate) are searched.

     By using both `-nostdinc' and `-I-', you can limit the include-file
     search path to only those directories you specify explicitly.

`-nostdinc++'
     Do not search for header files in the C++-specific standard
     directories, but do still search the other standard directories.
     (This option is used when building the C++ library.)

`-remap'
     When searching for a header file in a directory, remap file names
     if a file named `header.gcc' exists in that directory.  This can
     be used to work around limitations of file systems with file name
     restrictions.  The `header.gcc' file should contain a series of
     lines with two tokens on each line: the first token is the name to
     map, and the second token is the actual name to use.

`-D NAME'
     Predefine NAME as a macro, with definition `1'.

`-D NAME=DEFINITION'
     Predefine NAME as a macro, with definition DEFINITION.  There are
     no restrictions on the contents of DEFINITION, but if you are
     invoking the preprocessor from a shell or shell-like program you
     may need to use the shell's quoting syntax to protect characters
     such as spaces that have a meaning in the shell syntax.  If you
     use more than one `-D' for the same NAME, the rightmost definition
     takes effect.

     Any `-D' and `-U' options on the command line are processed in
     order, and always before `-imacros FILE', regardless of the order
     in which they are written.

`-U NAME'
     Do not predefine NAME.

     Any `-D' and `-U' options on the command line are processed in
     order, and always before `-imacros FILE', regardless of the order
     in which they are written.

`-undef'
     Do not predefine any nonstandard macros.

`-gcc'
     Define the macros __GNUC__, __GNUC_MINOR__ and
     __GNUC_PATCHLEVEL__. These are defined automatically when you use
     `gcc -E'; you can turn them off in that case with `-no-gcc'.

`-A PREDICATE=ANSWER'
     Make an assertion with the predicate PREDICATE and answer ANSWER.
     This form is preferred to the older form `-A PREDICATE(ANSWER)',
     which is still supported, because it does not use shell special
     characters.  *Note Assertions::.

`-A -PREDICATE=ANSWER'
     Disable an assertion with the predicate PREDICATE and answer
     ANSWER.  Specifying no predicate, by `-A-' or `-A -', disables all
     predefined assertions and all assertions preceding it on the
     command line; and also undefines all predefined macros and all
     macros preceding it on the command line.

`-dM'
     Instead of outputting the result of preprocessing, output a list of
     `#define' directives for all the macros defined during the
     execution of the preprocessor, including predefined macros.  This
     gives you a way of finding out what is predefined in your version
     of the preprocessor; assuming you have no file `foo.h', the command

          touch foo.h; cpp -dM foo.h

     will show the values of any predefined macros.

`-dD'
     Like `-dM' except in two respects: it does _not_ include the
     predefined macros, and it outputs _both_ the `#define' directives
     and the result of preprocessing.  Both kinds of output go to the
     standard output file.

`-dN'
     Like `-dD', but emit only the macro names, not their expansions.

`-dI'
     Output `#include' directives in addition to the result of
     preprocessing.

`-M'
     Instead of outputting the result of preprocessing, output a rule
     suitable for `make' describing the dependencies of the main source
     file.  The preprocessor outputs one `make' rule containing the
     object file name for that source file, a colon, and the names of
     all the included files, including those coming from `-include' or
     `-imacros' command line options.  Unless specified explicitly (with
     `-MT' or `-MQ'), the object file name consists of the basename of
     the source file with any suffix replaced with object file suffix.
     If there are many included files then the rule is split into
     several lines using `\'-newline.

`-MM'
     Like `-M', but mention only the files included with `#include
     "FILE"' or with `-include' or `-imacros' command line options.
     System header files included with `#include <FILE>' are omitted.

`-MF FILE'
     When used with `-M' or `-MM', specifies a file to write the
     dependencies to.  This allows the preprocessor to write the
     preprocessed file to stdout normally.  If no `-MF' switch is
     given, CPP sends the rules to stdout and suppresses normal
     preprocessed output.

`-MG'
     When used with `-M' or `-MM', `-MG' says to treat missing header
     files as generated files and assume they live in the same
     directory as the source file.  It suppresses preprocessed output,
     as a missing header file is ordinarily an error.

     This feature is used in automatic updating of makefiles.

`-MP'
     This option instructs CPP to add a phony target for each dependency
     other than the main file, causing each to depend on nothing.  These
     dummy rules work around errors `make' gives if you remove header
     files without updating the `Makefile' to match.

     This is typical output:-

          /tmp/test.o: /tmp/test.c /tmp/test.h
          
          /tmp/test.h:

`-MQ TARGET'

`-MT TARGET'
     By default CPP uses the main file name, including any path, and
     appends the object suffix, normally ".o", to it to obtain the name
     of the target for dependency generation.  With `-MT' you can
     specify a target yourself, overriding the default one.

     If you want multiple targets, you can specify them as a single
     argument to `-MT', or use multiple `-MT' options.

     The targets you specify are output in the order they appear on the
     command line.  `-MQ' is identical to `-MT', except that the target
     name is quoted for Make, but with `-MT' it isn't.  For example,
     -MT '$(objpfx)foo.o' gives

          $(objpfx)foo.o: /tmp/foo.c

     but -MQ '$(objpfx)foo.o' gives

          $$(objpfx)foo.o: /tmp/foo.c

     The default target is automatically quoted, as if it were given
     with `-MQ'.

`-H'
     Print the name of each header file used, in addition to other
     normal activities.

`-imacros FILE'
     Process FILE as input and discard the resulting output.

     This has all the effects of `#include "file"' appearing on the
     first line of the main source file, such as generating
     dependencies and being listed with the `-H' option, except that no
     output is generated, and that the first directory searched for
     FILE is the preprocessor's working directory _instead of_ the
     directory containing the main source file.  If not found there, it
     is searched for in the remainder of the `#include "..."' search
     chain as normal.

     Because the output is discarded, the main effect of `-imacros
     FILE' is to make the macros defined in FILE available for use in
     the main input.

`-include FILE'
     Process FILE as input, and include all the resulting output.

     This has all the effects of `#include "file"' appearing on the
     first line of the main source file, such as generating
     dependencies and being listed with the `-H' option, except that
     the first directory searched for FILE is the preprocessor's
     working directory _instead of_ the directory containing the main
     source file.  If not found there, it is searched for in the
     remainder of the `#include "..."'  search chain as normal.

`-idirafter DIR'
     Add the directory DIR to the second include path, marking it as a
     system directory.  The directories on the second include path are
     searched when a header file is not found in any of the directories
     in the main include path (the one that `-I' adds to).

`-iprefix PREFIX'
     Specify PREFIX as the prefix for subsequent `-iwithprefix'
     options.  If the prefix represents a directory, you should include
     the final `/'.

`-iwithprefix DIR'
     Add a directory to the second include path, marking it as a system
     directory.  The directory's name is made by concatenating PREFIX
     and DIR, where PREFIX was specified previously with `-iprefix'.

`-isystem DIR'
     Add a directory to the beginning of the second include path,
     marking it as a system directory, so that it gets the same special
     treatment as is applied to the standard system directories.  *Note
     System Headers::.

`-x c'
`-x c++'
`-x objective-c'
`-x assembler-with-cpp'
     Specify the source language: C, C++, Objective-C, or assembly.
     This has nothing to do with standards conformance or extensions;
     it merely selects which base syntax to expect.  If you give none
     of these options, cpp will deduce the language from the extension
     of the source file: `.c', `.cc', `.m', or `.S'.  Some other common
     extensions for C++ and assembly are also recognized.  If cpp does
     not recognize the extension, it will treat the file as C; this is
     the most generic mode.

     *Note:* Previous versions of cpp accepted a `-lang' option which
     selected both the language and the standards conformance level.
     This option has been removed, because it conflicts with the `-l'
     option.

`-std=STANDARD'
`-ansi'
     Specify the standard to which the code should conform.  Currently
     cpp only knows about the standards for C; other language standards
     will be added in the future.

     STANDARD may be one of:
    `iso9899:1990'
    `c89'
          The ISO C standard from 1990.  `c89' is the customary
          shorthand for this version of the standard.

          The `-ansi' option is equivalent to `-std=c89'.

    `iso9899:199409'
          The 1990 C standard, as amended in 1994.

    `iso9899:1999'
    `c99'
    `iso9899:199x'
    `c9x'
          The revised ISO C standard, published in December 1999.
          Before publication, this was known as C9X.

    `gnu89'
          The 1990 C standard plus GNU extensions.  This is the default.

    `gnu99'
    `gnu9x'
          The 1999 C standard plus GNU extensions.

`-ftabstop=NUMBER'
     Set the distance between tab stops.  This helps the preprocessor
     report correct column numbers in warnings or errors, even if tabs
     appear on the line.  Values less than 1 or greater than 100 are
     ignored.  The default is 8.

`-$'
     Forbid the use of `$' in identifiers.  The C standard allows
     implementations to define extra characters that can appear in
     identifiers.  By default the GNU C preprocessor permits `$', a
     common extension.


File: cpp.info,  Node: Concept Index,  Next: Index,  Prev: Invocation,  Up: Top

Concept Index
*************

* Menu:

* ##:                                    Concatenation.
* arguments in macro definitions:        Function-like Macros.
* ASCII NUL handling:                    Global Actions.
* assertions:                            Assertions.
* assertions, undoing:                   Assertions.
* cascaded macros:                       Cascaded Macros.
* commenting out code:                   Deleted Code.
* computed #include:                     Include Syntax.
* concatenation:                         Concatenation.
* conditionals:                          Conditionals.
* deprecated features:                   Unreliable Features.
* directives:                            Directives.
* empty macro arguments:                 Function-like Macros.
* expansion of arguments:                Argument Prescan.
* Fortran:                               Invocation.
* function-like macro:                   Function-like Macros.
* g77:                                   Invocation.
* header file:                           Header Files.
* implementation limits:                 Implementation.
* implementation-defined behavior:       Implementation.
* including just once:                   Once-Only.
* inheritance:                           Inheritance.
* invocation of the preprocessor:        Invocation.
* line control:                          Line Control.
* macro argument expansion:              Argument Prescan.
* macro body uses macro:                 Cascaded Macros.
* macro with variable arguments:         Macro Varargs.
* macros with argument:                  Function-like Macros.
* manifest constant:                     Object-like Macros.
* newlines in macro arguments:           Newlines in Args.
* null directive:                        Other Directives.
* object-like macro:                     Object-like Macros.
* options:                               Invocation.
* output format:                         Output.
* overriding a header file:              Inheritance.
* parentheses in macro bodies:           Macro Parentheses.
* pitfalls of macros:                    Macro Pitfalls.
* poisoning macros:                      Poisoning.
* predefined macros:                     Predefined.
* predicates:                            Assertions.
* preprocessing directives:              Directives.
* prescan of macro arguments:            Argument Prescan.
* problems with macros:                  Macro Pitfalls.
* redefining macros:                     Redefining.
* repeated inclusion:                    Once-Only.
* rest argument (in macro):              Macro Varargs.
* retracting assertions:                 Assertions.
* second include path:                   Invocation.
* self-reference:                        Self-Reference.
* semicolons (after macro calls):        Swallow Semicolon.
* side effects (in macro arguments):     Side Effects.
* standard predefined macros:            Standard Predefined.
* stringification:                       Stringification.
* system header files <1>:               System Headers.
* system header files:                   Header Uses.
* testing predicates:                    Assertions.
* unassert:                              Assertions.
* undefined behavior:                    Unreliable Features.
* undefining macros:                     Undefining.
* unsafe macros:                         Side Effects.
* unterminated:                          Invocation.
* variable number of arguments:          Macro Varargs.


File: cpp.info,  Node: Index,  Prev: Concept Index,  Up: Top

Index of Directives, Macros and Options
***************************************

* Menu:

* #assert:                               Assertions.
* #cpu:                                  Assertions.
* #define:                               Function-like Macros.
* #elif:                                 #elif Directive.
* #else:                                 #else Directive.
* #error:                                #error Directive.
* #ident:                                Other Directives.
* #if:                                   Conditional Syntax.
* #ifdef:                                Conditionals-Macros.
* #ifndef:                               Conditionals-Macros.
* #import:                               Once-Only.
* #include:                              Include Syntax.
* #include_next:                         Inheritance.
* #line:                                 Line Control.
* #machine:                              Assertions.
* #pragma:                               Other Directives.
* #pragma GCC:                           Other Directives.
* #pragma GCC dependency:                Other Directives.
* #pragma GCC poison:                    Poisoning.
* #pragma GCC system_header:             System Headers.
* #pragma once:                          Unreliable Features.
* #system:                               Assertions.
* #unassert:                             Assertions.
* #warning:                              #error Directive.
* -$:                                    Invocation.
* -A:                                    Invocation.
* -ansi:                                 Invocation.
* -C:                                    Invocation.
* -D:                                    Invocation.
* -dD:                                   Invocation.
* -dI:                                   Invocation.
* -dM:                                   Invocation.
* -dN:                                   Invocation.
* -ftabstop:                             Invocation.
* -gcc:                                  Invocation.
* -H:                                    Invocation.
* -I:                                    Invocation.
* -idirafter:                            Invocation.
* -imacros:                              Invocation.
* -include:                              Invocation.
* -iprefix:                              Invocation.
* -isystem <1>:                          Invocation.
* -isystem:                              System Headers.
* -iwithprefix:                          Invocation.
* -M:                                    Invocation.
* -MF:                                   Invocation.
* -MG:                                   Invocation.
* -MM:                                   Invocation.
* -MP:                                   Invocation.
* -MQ:                                   Invocation.
* -MT:                                   Invocation.
* -nostdinc:                             Invocation.
* -nostdinc++:                           Invocation.
* -P:                                    Invocation.
* -pedantic:                             Invocation.
* -pedantic-errors:                      Invocation.
* -remap:                                Invocation.
* -std:                                  Invocation.
* -traditional:                          Invocation.
* -trigraphs:                            Invocation.
* -U:                                    Invocation.
* -undef:                                Invocation.
* -Wall:                                 Invocation.
* -Wcomment:                             Invocation.
* -Wtraditional:                         Invocation.
* -Wtrigraphs:                           Invocation.
* -Wundef:                               Invocation.
* -x assembler-with-cpp:                 Invocation.
* -x c:                                  Invocation.
* -x objective-c:                        Invocation.
* __BASE_FILE__:                         Standard Predefined.
* __CHAR_UNSIGNED__:                     Standard Predefined.
* __cplusplus:                           Standard Predefined.
* __DATE__:                              Standard Predefined.
* __FILE__:                              Standard Predefined.
* __GNUC__:                              Standard Predefined.
* __GNUC_MINOR__:                        Standard Predefined.
* __GNUC_PATCHLEVEL__:                   Standard Predefined.
* __GNUG__:                              Standard Predefined.
* __INCLUDE_LEVEL_:                      Standard Predefined.
* __LINE__:                              Standard Predefined.
* __OPTIMIZE__:                          Standard Predefined.
* __OPTIMIZE_SIZE__:                     Standard Predefined.
* __REGISTER_PREFIX__:                   Standard Predefined.
* __STDC__:                              Standard Predefined.
* __STDC_VERSION__:                      Standard Predefined.
* __STRICT_ANSI__:                       Standard Predefined.
* __TIME__:                              Standard Predefined.
* __USER_LABEL_PREFIX__:                 Standard Predefined.
* __VERSION__:                           Standard Predefined.
* _AM29000:                              Nonstandard Predefined.
* _AM29K:                                Nonstandard Predefined.
* _Pragma:                               Other Directives.
* BSD:                                   Nonstandard Predefined.
* defined:                               Conditionals-Macros.
* M68020:                                Nonstandard Predefined.
* m68k:                                  Nonstandard Predefined.
* mc68000:                               Nonstandard Predefined.
* ns32000:                               Nonstandard Predefined.
* pyr:                                   Nonstandard Predefined.
* sequent:                               Nonstandard Predefined.
* sun:                                   Nonstandard Predefined.
* unix:                                  Nonstandard Predefined.
* vax:                                   Nonstandard Predefined.


